package gameObjects;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.util.ArrayList;

import main.Window;

public class GameObjectHandler {
	private ArrayList<GameObject> objectList;
	private boolean running;

	public GameObjectHandler() {
		objectList = new ArrayList<GameObject>();
		running = true;
	}

	public void update() {
		if (running) {
			for (int i = 0; i < objectList.size(); i++) {
				GameObject tempObject = objectList.get(i);
				tempObject.update();
				checkCollision(tempObject);
				if (!tempObject.isAlive()) {
					removeObject(tempObject);
				}

			}
		}
	}

	public void checkCollision(GameObject object/*, Graphics2D g*/) {
		AffineTransform at = AffineTransform.getTranslateInstance(object.getX(), object.getY());
		at.rotate(Math.toRadians(object.getAngle() * 22.5), object.image.getWidth() / 2, object.image.getHeight() / 2);
		GeneralPath path = new GeneralPath();
		path.append(object.getBounds().getPathIterator(at), true);
		Area a1 = new Area(path);
		// fill detection bounds
		//g.fill(path);
        //g.setColor(Color.BLUE);
        //g.draw(path.getBounds());
        
		for (int i = 0; i < objectList.size(); i++) {
			GameObject tempObject = objectList.get(i);
			if (object != tempObject) {
				at = new AffineTransform();
				at = AffineTransform.getTranslateInstance(tempObject.getX(), tempObject.getY());
				at.rotate(Math.toRadians(tempObject.getAngle() * 22.5), tempObject.image.getWidth() / 2, tempObject.image.getHeight() / 2);
				path = new GeneralPath();
				path.append(tempObject.getBounds().getPathIterator(at), true);
				// fill detection bounds
				//g.fill(path);
		        //g.setColor(Color.BLUE);
		        //g.draw(path.getBounds());
				Area a2 = new Area(path);
				a2.intersect(a1);
				if (!a2.isEmpty()) {
					
					// bullet to tank
					if (tempObject.getId() == "Bullet" && tempObject.getOwner() != object.getId()) {
						tempObject.setAlive(false);
					} else if (object.getId() == "Bullet" && object.getOwner() != tempObject.getId()) {
						object.setAlive(false);
					}
					
					// tank to tank
					if ((tempObject.getId() == "Player1" && object.getId() == "Player2") || (tempObject.getId() == "Player2" && object.getId() == "Player1")){
						tempObject.respawn();
						object.respawn();
					)
				}
			}
		}

	}

	public void draw(Graphics2D g) {
		
		for (int i = objectList.size() - 1; i >= 0 ; i--){
			GameObject tempObject = objectList.get(i);
			tempObject.draw(g);
		}

		if (!running) {
			g.setColor(Color.WHITE);
			g.setFont(new Font(Window.FONTSTYLE, Font.BOLD, 64));
			g.drawString("Paused", Window.WIDTH / 2 - 105, Window.HEIGHT / 2 - 10);
		}

	}

	public void pause() {
		running = !running;
	}

	public boolean isRunning() {
		return running;
	}

	public boolean isPaused() {
		return !running;
	}

	public void addObject(GameObject object) {
		if (running) {
			this.objectList.add(object);
		}
	}

	public void removeObject(GameObject object) {
		if (running) {
			this.objectList.remove(object);
		}
	}

}
